/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.16
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.coding.apiserver.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * PodPresetSpec is a description of a pod preset.
 */
@ApiModel(description = "PodPresetSpec is a description of a pod preset.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-29T07:27:12.312Z[Etc/UTC]")
public class VPodPresetSpec {
  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<VEnvVar> env = null;

  public static final String SERIALIZED_NAME_ENV_FROM = "envFrom";
  @SerializedName(SERIALIZED_NAME_ENV_FROM)
  private List<VEnvFromSource> envFrom = null;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private VLabelSelector selector;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<VVolumeMount> volumeMounts = null;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<VVolume> volumes = null;


  public VPodPresetSpec env(List<VEnvVar> env) {

    this.env = env;
    return this;
  }

  public VPodPresetSpec addEnvItem(VEnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<VEnvVar>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Env defines the collection of EnvVar to inject into containers.
   * @return env
  **/

  @ApiModelProperty(value = "Env defines the collection of EnvVar to inject into containers.")

  public List<VEnvVar> getEnv() {
    return env;
  }


  public void setEnv(List<VEnvVar> env) {
    this.env = env;
  }


  public VPodPresetSpec envFrom(List<VEnvFromSource> envFrom) {

    this.envFrom = envFrom;
    return this;
  }

  public VPodPresetSpec addEnvFromItem(VEnvFromSource envFromItem) {
    if (this.envFrom == null) {
      this.envFrom = new ArrayList<VEnvFromSource>();
    }
    this.envFrom.add(envFromItem);
    return this;
  }

   /**
   * EnvFrom defines the collection of EnvFromSource to inject into containers.
   * @return envFrom
  **/

  @ApiModelProperty(value = "EnvFrom defines the collection of EnvFromSource to inject into containers.")

  public List<VEnvFromSource> getEnvFrom() {
    return envFrom;
  }


  public void setEnvFrom(List<VEnvFromSource> envFrom) {
    this.envFrom = envFrom;
  }


  public VPodPresetSpec selector(VLabelSelector selector) {

    this.selector = selector;
    return this;
  }

   /**
   * Get selector
   * @return selector
  **/

  @ApiModelProperty(value = "")

  public VLabelSelector getSelector() {
    return selector;
  }


  public void setSelector(VLabelSelector selector) {
    this.selector = selector;
  }


  public VPodPresetSpec volumeMounts(List<VVolumeMount> volumeMounts) {

    this.volumeMounts = volumeMounts;
    return this;
  }

  public VPodPresetSpec addVolumeMountsItem(VVolumeMount volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<VVolumeMount>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

   /**
   * VolumeMounts defines the collection of VolumeMount to inject into containers.
   * @return volumeMounts
  **/

  @ApiModelProperty(value = "VolumeMounts defines the collection of VolumeMount to inject into containers.")

  public List<VVolumeMount> getVolumeMounts() {
    return volumeMounts;
  }


  public void setVolumeMounts(List<VVolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  public VPodPresetSpec volumes(List<VVolume> volumes) {

    this.volumes = volumes;
    return this;
  }

  public VPodPresetSpec addVolumesItem(VVolume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<VVolume>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Volumes defines the collection of Volume to inject into the pod.
   * @return volumes
  **/

  @ApiModelProperty(value = "Volumes defines the collection of Volume to inject into the pod.")

  public List<VVolume> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<VVolume> volumes) {
    this.volumes = volumes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VPodPresetSpec v1alpha1PodPresetSpec = (VPodPresetSpec) o;
    return Objects.equals(this.env, v1alpha1PodPresetSpec.env) &&
        Objects.equals(this.envFrom, v1alpha1PodPresetSpec.envFrom) &&
        Objects.equals(this.selector, v1alpha1PodPresetSpec.selector) &&
        Objects.equals(this.volumeMounts, v1alpha1PodPresetSpec.volumeMounts) &&
        Objects.equals(this.volumes, v1alpha1PodPresetSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(env, envFrom, selector, volumeMounts, volumes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1PodPresetSpec {\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    envFrom: ").append(toIndentedString(envFrom)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

